AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: PhitNest-API

#### GLOBALS ####
Globals:
  Function:
    Timeout: 25
    Environment:
      Variables:
        REGION: us-east-1
        COGNITO_USER_POOL_ID: !Ref UserCognitoUserPool
        COGNITO_USER_POOL_APP_ID: !Ref UserCognitoUserPoolClient

#### Input Parameters ####
Parameters:
  Stage:
    Type: String
    Description: Parameter for getting the deployment stage
    Default: default

#### Conditions ####
Conditions:
  CreateSandboxResources: !Equals [!Ref Stage, sandbox]

Resources:
  #### API GATEWAY ####
  PhitNestApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors: '''*'''
      Name: !Sub "PhitNest-${Stage}-API"
      EndpointConfiguration:
        Type: EDGE
        VPCEndpointIds:
          - !Ref DGraphVPCEndpoint
      Auth:
        Authorizers:
          UserCognitoAuthorizer:
            UserPoolArn: !GetAtt UserCognitoUserPool.Arn
  
  #### COGNITO ####
  UserCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "PhitNest-${Stage}"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      EmailConfiguration:
        EmailSendingAccount: DEVELOPER
        From: PhitNest <verify@phitnest.com>
        ReplyToEmailAddress: verify@phitnest.com
        SourceArn: arn:aws:ses:us-east-1:235601651768:identity/phitnest.com
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
        - phone_number
      Schema:
        - AttributeDataType: String
          Name: email
          Required: true

  UserCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserCognitoUserPool
      EnableTokenRevocation: true
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_PASSWORD_AUTH
      ClientName: !Sub "PhitNest-${Stage}"
      GenerateSecret: false

  #### DGRAPH ####
  DGraphVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  #### DGRAPH EC2 ####
  DGraphEC2:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0a887e401f7654935
      InstanceType: t3.medium
      SubnetId: !Ref DGraphPrivateSubnet
      IamInstanceProfile: !Ref DGraphSSMAgentProfile
      SecurityGroupIds:
        - !Ref DGraphSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          
      Tags:
        - Key: Name
          Value: !Sub "DGraph-${Stage}"

  DGraphPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref DGraphVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Select [ 0, !GetAZs "" ]

  DGraphVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref DGraphVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref DGraphSecurityGroup
      SubnetIds:
        - !Ref DGraphPrivateSubnet

  DGraphSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "DGraphSecurityGroup-${Stage}"
      GroupDescription: DGraph Security Group
      VpcId: !Ref DGraphVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9080
          ToPort: 9080
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  #### DGRAPH SSM ####
  DGraphSSMAgentProfile:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      InstanceProfileName: !Sub "dgraph-ssm-access-${Stage}"
      Path: !Sub "/dgraph-ec2/${Stage}/"
      Roles:
        - !Ref DGraphSSMAgentRole

  DGraphSSMAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: !Sub "/dgraph-ec2/${Stage}/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  DGraphSSMEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref DGraphVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssm"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      SubnetIds:
        - !Ref DGraphPrivateSubnet

  DGraphEC2MessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref DGraphVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ec2messages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      SubnetIds:
        - !Ref DGraphPrivateSubnet

  DGraphSSMMessagesEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref DGraphVPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.ssmmessages"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SecurityGroupIds:
        - !Ref SSMEndpointSecurityGroup
      SubnetIds:
        - !Ref DGraphPrivateSubnet

  SSMEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "SSMEndpointSecurityGroup-${Stage}"
      GroupDescription: SSM Endpoint Security Group
      VpcId: !Ref DGraphVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  #### CODEGEN STARTS BELOW HERE ####
