openapi: 3.0.0
info:
  title: apps/backend/rest-api
  description: Backend Represetation of GoldNest
  version: "1.0.0"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/CAGLARKULLU_1/Demo/1.0.0
  - url: http://api.yourdomain.com/v1
    description: Production server
tags:
  - name: User Management
    description: Operations related to user account management.
  - name: Friend Requests
    description: Operations for managing friend requests.
  - name: Messaging
    description: Operations related to user messaging.
  - name: Reporting
    description: Operations for reporting users or content.
  - name: Logging
    description: Operations for submitting and managing log events.
  - name: Home Data
    description: Operations for fetching home screen data.
  
paths:
  /private/user:
    delete:
      tags:
        - User Management
      summary: Delete user account
      
      description: Deletes the user's account along with all associated friend requests, messages, and other related data. This operation is irreversible.
      responses:
        '200':
          description: User account and all associated data successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User account and all associated data successfully deleted."
        '401':
          description: Unauthorized request, such as missing or invalid authentication credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        '404':
          description: User not found or already deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found or already deleted."

  /private/conversation:
    get:
      tags:
        - Messaging
      summary: Retrieve conversation messages
      description: Fetches conversation messages between the authenticated user and the specified friend, using the friend's user ID (`friendId`) to identify the conversation.
      parameters:
        - in: query
          name: friendId
          required: true
          schema:
            type: string
          description: The unique identifier (user ID) of the friend with whom the conversation is being retrieved.
      responses:
        '200':
          description: Successfully retrieved conversation messages.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '400':
          description: Bad request, such as missing or invalid friendId in the query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        '404':
          description: No conversation found with the specified friendId.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No conversation found."
  /private/explore:
    get:
      tags:
        - User Management
      summary: Explore users
      description: Provides a list of users for exploration, potentially to find new friends or connections.
      responses:
        '200':
          description: Successfully retrieved a list of users to explore.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserData'
        '400':
          description: Bad request, such as issues with query parameters or request formatting.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        '404':
          description: No users found for exploration.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No users found."

  /private/friend-request:
    post:
      tags:
        - Friend Requests
      summary: Send or accept a friend request
      description: |
        Sends a new friend request to the specified user or accepts an existing one if found.
        If an outgoing friend request already exists, an error is returned.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiverId:
                  type: string
                  description: The unique identifier of the user to whom the friend request is being sent.
              required:
                - receiverId
      responses:
        '200':
          description: Friend request successfully sent or accepted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  sender:
                    $ref: '#/components/schemas/User'
                  receiver:
                    $ref: '#/components/schemas/User'
                  createdAt:
                    type: string
                    format: date-time
                  accepted:
                    type: boolean
                required:
                  - sender
                  - receiver
                  - createdAt
                  - accepted
        '400':
          description: Friend request cannot be sent due to an existing outgoing friend request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

    delete:
      tags:
        - Friend Requests
      summary: Delete a friend request
      description: Deletes an existing friend request, either sent by the user or received from the specified friend.
      parameters:
        - in: query
          name: friendId
          required: true
          schema:
            type: string
          description: The unique identifier of the friend from whom the friend request is being deleted.
      responses:
        '200':
          description: Friend request successfully deleted.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Friend request successfully deleted."
        '400':
          description: Bad request, such as missing friendId in the query parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
  /private/home:
    get:
      tags:
        - Home Data
      summary: Fetch home screen data
      description: Retrieves data for the user's home screen, including personal information, recent messages, and pending friend requests.
      responses:
        '200':
          description: Successfully retrieved home screen data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  userInfo:
                    $ref: '#/components/schemas/UserData'
                  recentMessages:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'
                  pendingFriendRequests:
                    type: array
                    items:
                      $ref: '#/components/schemas/FriendRequest'
        '401':
          description: Unauthorized request, such as missing or invalid authentication credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /public/log:
    post:
      tags:
        - Logging
      summary: Submit a public log event
      description: Allows public submission of a log event, structured according to the LogEvent schema. This endpoint is accessible without authentication.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogEvent'
      responses:
        '200':
          description: Public log event submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Public log event submitted successfully."
        '400':
          description: Bad request, such as invalid log event data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

  /private/report:
    get:
      tags:
        - Reporting
      summary: Fetch user reports
      description: Retrieves a list of reports made by users, including details such as the reporter, the reported user, the reason for the report, and the date the report was created.
      responses:
        '200':
          description: Successfully retrieved user reports.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReportUser'
        '401':
          description: Unauthorized request, such as missing or invalid authentication credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        '404':
          description: No reports found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No reports found."

    post:
      tags:
        - Reporting
      summary: Submit a user report
      description: Allows authenticated users to submit reports about other users, specifying the reported user and the reason for the report.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiverId:
                  type: string
                  description: The unique identifier of the user being reported.
                reason:
                  type: string
                  description: The reason for the report.
              required:
                - receiverId
                - reason
      responses:
        '200':
          description: Report submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Report submitted successfully."
        '400':
          description: Bad request, such as missing required fields or invalid data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string
        '401':
          description: Unauthorized request, such as missing or invalid authentication credentials.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                  message:
                    type: string

components:
  schemas:
    UserData:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user.
        firstName:
          type: string
          description: The first name of the user.
        lastName:
          type: string
          description: The last name of the user.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the user was created.
      required:
        - id
        - firstName
        - lastName
        - createdAt
    User:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the user.
      required:
        - id
    FriendRequest:
      type: object
      properties:
        sender:
          $ref: '#/components/schemas/User'
          description: The user who sent the friend request.
        receiver:
          $ref: '#/components/schemas/User'
          description: The user who received the friend request.
        accepted:
          type: boolean
          description: Whether the friend request has been accepted.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the friend request was created.
      required:
        - sender
        - receiver
        - accepted
        - createdAt
    LogEvent:
      type: object
      properties:
        logId:
          type: string
          description: The unique identifier for the log event.
        timestamp:
          type: string
          format: date-time
          description: The date and time when the log event occurred.
        action:
          type: string
          description: The action that triggered the log event.
        details:
          type: string
          description: Detailed information about the log event.
      required:
        - logId
        - timestamp
        - action
        - details
    Message:
      type: object
      properties:
        messageId:
          type: integer
          description: The unique identifier for the message.
        senderId:
          type: string
          description: The unique identifier for the sender of the message.
        receiverId:
          type: string
          description: The unique identifier for the receiver of the message.
        content:
          type: string
          description: The content of the message.
      required:
        - messageId
        - senderId
        - receiverId
        - content
    ReportUser:
      type: object
      properties:
        senderId:
          type: string
          description: The unique identifier of the user who is reporting another user.
        receiverId:
          type: string
          description: The unique identifier of the user being reported.
        reason:
          type: string
          description: The reason for the report.
        createdAt:
          type: string
          format: date-time
          description: The date and time when the report was created.
      required:
        - senderId
        - receiverId
        - reason
        - createdAt