/// HTTP Status Code
export const statusContinue = 100; // RFC 7231; 6.2.1
export const statusSwitchingProtocols = 101; // RFC 7231; 6.2.2
export const statusProcessing = 102; // RFC 2518; 10.1
export const statusEarlyHints = 103; // RFC 8297
export const statusOK = 200; // RFC 7231; 6.3.1
export const statusCreated = 201; // RFC 7231; 6.3.2
export const statusAccepted = 202; // RFC 7231; 6.3.3
export const statusNonAuthoritativeInfo = 203; // RFC 7231; 6.3.4
export const statusNoContent = 204; // RFC 7231; 6.3.5
export const statusResetContent = 205; // RFC 7231; 6.3.6
export const statusPartialContent = 206; // RFC 7233; 4.1
export const statusMultiStatus = 207; // RFC 4918; 11.1
export const statusAlreadyReported = 208; // RFC 5842; 7.1
export const statusIMUsed = 226; // RFC 3229; 10.4.1
export const statusMultipleChoices = 300; // RFC 7231; 6.4.1
export const statusMovedPermanently = 301; // RFC 7231; 6.4.2
export const statusFound = 302; // RFC 7231; 6.4.3
export const statusSeeOther = 303; // RFC 7231; 6.4.4
export const statusNotModified = 304; // RFC 7232; 4.1
export const statusUseProxy = 305; // RFC 7231; 6.4.5
export const statusTemporaryRedirect = 307; // RFC 7231; 6.4.7
export const statusPermanentRedirect = 308; // RFC 7538; 3
export const statusBadRequest = 400; // RFC 7231; 6.5.1
export const statusUnauthorized = 401; // RFC 7235; 3.1
export const statusPaymentRequired = 402; // RFC 7231; 6.5.2
export const statusForbidden = 403; // RFC 7231; 6.5.3
export const statusNotFound = 404; // RFC 7231; 6.5.4
export const statusMethodNotAllowed = 405; // RFC 7231; 6.5.5
export const statusNotAcceptable = 406; // RFC 7231; 6.5.6
export const statusProxyAuthRequired = 407; // RFC 7235; 3.2
export const statusRequestTimeout = 408; // RFC 7231; 6.5.7
export const statusConflict = 409; // RFC 7231; 6.5.8
export const statusGone = 410; // RFC 7231; 6.5.9
export const statusLengthRequired = 411; // RFC 7231; 6.5.10
export const statusPreconditionFailed = 412; // RFC 7232; 4.2
export const statusRequestEntityTooLarge = 413; // RFC 7231; 6.5.11
export const statusRequestURITooLong = 414; // RFC 7231; 6.5.12
export const statusUnsupportedMediaType = 415; // RFC 7231; 6.5.13
export const statusRequestedRangeNotSatisfiable = 416; // RFC 7233; 4.4
export const statusExpectationFailed = 417; // RFC 7231; 6.5.14
export const statusTeapot = 418; // RFC 7168; 2.3.3
export const statusMisdirectedRequest = 421; // RFC 7540; 9.1.2
export const statusUnprocessableEntity = 422; // RFC 4918; 11.2
export const statusLocked = 423; // RFC 4918; 11.3
export const statusFailedDependency = 424; // RFC 4918; 11.4
export const statusTooEarly = 425; // RFC 8470; 5.2.
export const statusUpgradeRequired = 426; // RFC 7231; 6.5.15
export const statusPreconditionRequired = 428; // RFC 6585; 3
export const statusTooManyRequests = 429; // RFC 6585; 4
export const statusRequestHeaderFieldsTooLarge = 431; // RFC 6585; 5
export const statusUnavailableForLegalReasons = 451; // RFC 7725; 3
export const statusInternalServerError = 500; // RFC 7231; 6.6.1
export const statusNotImplemented = 501; // RFC 7231; 6.6.2
export const statusBadGateway = 502; // RFC 7231; 6.6.3
export const statusServiceUnavailable = 503; // RFC 7231; 6.6.4
export const statusGatewayTimeout = 504; // RFC 7231; 6.6.5
export const statusHTTPVersionNotSupported = 505; // RFC 7231; 6.6.6
export const statusVariantAlsoNegotiates = 506; // RFC 2295; 8.1
export const statusInsufficientStorage = 507; // RFC 4918; 11.5
export const statusLoopDetected = 508; // RFC 5842; 7.2
export const statusNotExtended = 510; // RFC 2774; 7
export const statusNetworkAuthenticationRequired = 511; // RFC 6585; 6
